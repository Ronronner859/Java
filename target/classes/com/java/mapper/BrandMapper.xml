<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    namesqpce:名称空间
-->
<mapper namespace="com.java.mapper.BrandMapper">

    <!--数据库表的字段名称 和 实体类的属性名称 不一样，则不能自动封装数据-->
    <!--    1.起别名
                缺点：定义别名
            2.定义sql片段
                缺点：不灵活
            3.resultMap
                1.定义标签
                2.使用属性替换

            -->
    <!--    <sql id="brand_column">-->
    <!--        id, brand_Name as brandName, company_Name as companyName,ordered,description,status-->
    <!--    </sql>-->
    <!--
            id:唯一标识
            type:映射的类型
            -->
    <resultMap id="brandResultMap" type="brand">
        <!--
                id:完成主键的映射
                    column:表的列名
                    property:实体类的属性名
                result：完成一般字段的映射
        -->
        <result column="brand_Name" property="brandName"/>
        <result column="company_Name" property="companyName"/>
    </resultMap>

    <select id="selectAll" resultMap="brandResultMap">
        select *
        from tb_brand;
    </select>
    <select id="selectAllById" resultMap="brandResultMap">
        select *
        from tb_brand where id = #{id};
        <!--        参数占位符：
                         1.#{} 将其替换成？防止sql注入
                         2.${} 拼sql 会存在sql注入问题
                         -->
    </select>
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        <!--        where 1 = 1-->
        <where>
            <!--        动态条件查询 逻辑表达式 test
                            2.1=1
                            3.where标签
                            -->
            <if test="status != null">
                status = #{status}
            </if>
            <if test="companyName != null and companyName !='' ">
                and company_Name like #{companyName}
            </if>
            <if test="brandName != null and brandName !='' ">
                and brand_Name like #{brandName}
            </if>
        </where>

    </select>

    <select id="selectAllByConditionSingle" resultMap="brandResultMap">
        select *
        from tb_brand
        <!--        where-->
        <!--        choose相当于switch-->
        <!--        用where自动生成-->
        <where>
            <choose>
                <when test="status != null">
                    <!--                when相当于when -->
                    status = #{status}
                </when>
                <when test="companyName != null and companyName !=''">
                    <!--                when相当于when-->
                    and company_Name like #{companyName}
                </when>
                <when test="brandName != null and brandName !=''">
                    <!--                when相当于when-->
                    and brand_Name like #{brandName}
                </when>
                <!--            <otherwise>-->
                <!--                1 = 1-->
                <!--            </otherwise>-->
            </choose>
        </where>
    </select>
    <!--    主键返回 可以获取到对应的id-->
    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand (brand_name,company_name,ordered,description,status)
        values (#{brandName},#{companyName},#{ordered},#{description},#{status});
    </insert>
    <update id="update">
        update tb_brand
        <set>
            <if test="brandName !=null and brandName != '' ">
                brand_name = #{brandName},
            </if>
            <if test="companyName !=null and companyName != '' ">
                company_name = #{companyName},
            </if>
            <if test="ordered !=null ">
                ordered = #{ordered},
            </if>
            <if test="description !=null and description != '' ">
                description = #{description},
            </if>
            <if test="status !=null">
                status = #{status}
            </if>
            where id = #{id};
        </set>

    </update>
    <delete id="deleteById">
        delete from tb_brand
        where id = #{id};
    </delete>
    <delete id="deleteByIds">
        delete from tb_brand
        where id
        in
<!--        mybatis会讲数组参数，封装为一个集合
            1.1默认为数组 array
            2.使用@param注解改变map集合的默认的key的名称
-->
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
        ;
    </delete>


</mapper>